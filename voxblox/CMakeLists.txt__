cmake_minimum_required(VERSION 3.5)
project(voxblox)


set(CMAKE_MACOSX_RPATH 0)
add_definitions(-std=c++11 -Wall -Wextra)

find_package(ament_cmake REQUIRED)


set(PROJECT_DEPENDENCIES
  Eigen3
)
foreach(DEPENDENCY ${PROJECT_DEPENDENCIES})
  find_package(${DEPENDENCY} REQUIRED)
endforeach()

############
# PROTOBUF #
############

# set(PROTO_DEFNS proto/voxblox/Block.proto
#                 proto/voxblox/Layer.proto)
# set(PROTOBUF_COMPILE_PYTHON true)

# PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${PROTO_DEFNS})

# add_library(${PROJECT_NAME}_proto
#   ${PROTO_SRCS}
# )

# target_include_directories(${PROJECT_NAME}_proto PUBLIC
#     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
#     $<INSTALL_INTERFACE:include/${PROJECT_NAME}>
# )

# target_link_libraries(${PROJECT_NAME}_proto ${Protobuf_LIBRARIES})
find_package(Protobuf REQUIRED)  # Provides protobuf_generate_cpp and targets

# Use absolute paths to the .proto files
set(PROTO_DEFNS
  ${CMAKE_CURRENT_SOURCE_DIR}/proto/voxblox/Block.proto
  ${CMAKE_CURRENT_SOURCE_DIR}/proto/voxblox/Layer.proto
)

# Generate C++ sources/headers into the binary dir
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROTO_DEFNS})

# (Optional but helpful) Show what got generated
message(STATUS "PROTO_SRCS: ${PROTO_SRCS}")
message(STATUS "PROTO_HDRS: ${PROTO_HDRS}")

# Create the library only from generated .cc files
add_library(${PROJECT_NAME}_proto ${PROTO_SRCS})

# Include both source and binary dirs (protoc writes headers in binary dir)
target_include_directories(${PROJECT_NAME}_proto PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
  $<INSTALL_INTERFACE:include/${PROJECT_NAME}>
)

# Link protobuf
target_link_libraries(${PROJECT_NAME}_proto PUBLIC protobuf::libprotobuf)

####################
# SET SOURCE FILES #
####################

set("${PROJECT_NAME}_SRCS"
  src/alignment/icp.cc
  src/core/block.cc
  src/core/esdf_map.cc
  src/core/tsdf_map.cc
  src/integrator/esdf_integrator.cc
  src/integrator/esdf_occ_integrator.cc
  src/integrator/integrator_utils.cc
  src/integrator/intensity_integrator.cc
  src/integrator/tsdf_integrator.cc
  src/io/mesh_ply.cc
  src/io/sdf_ply.cc
  src/mesh/marching_cubes.cc
  src/simulation/objects.cc
  src/simulation/simulation_world.cc
  src/utils/camera_model.cc
  src/utils/evaluation_utils.cc
  src/utils/layer_utils.cc
  src/utils/neighbor_tools.cc
  src/utils/protobuf_utils.cc
  src/utils/timing.cc
  src/utils/voxel_utils.cc
)

#############
# LIBRARIES #
#############
add_library(${PROJECT_NAME}
  ${${PROJECT_NAME}_SRCS}
)
target_include_directories(${PROJECT_NAME} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)
ament_target_dependencies(${PROJECT_NAME} ${PROJECT_DEPENDENCIES})
ament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)
ament_export_dependencies(${PROJECT_DEPENDENCIES})
ament_export_include_directories(include)
ament_export_libraries(${PROJECT_NAME})

target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_proto)

############
# BINARIES #
############

add_executable(tsdf_to_esdf
  test/tsdf_to_esdf.cc
)
target_link_libraries(tsdf_to_esdf ${PROJECT_NAME})

add_executable(test_load_esdf
  test/test_load_esdf.cc
)
target_link_libraries(test_load_esdf ${PROJECT_NAME})

#########
# TESTS #
#########
# add_custom_target(test_data)
# add_custom_command(TARGET test_data
#                   COMMAND rm -rf test_data
#                   COMMAND mkdir -p test_data
#                   COMMAND cp -r ${CMAKE_SOURCE_DIR}/test/test_data/*
#                                 test_data/ || :)

# #add_definitions(-DVISUALIZE_UNIT_TEST_RESULTS)

# catkin_add_gtest(test_approx_hash_array
#   test/test_approx_hash_array.cc
# )
# target_link_libraries(test_approx_hash_array ${PROJECT_NAME})

# catkin_add_gtest(test_tsdf_map
#   test/test_tsdf_map.cc
# )
# target_link_libraries(test_tsdf_map ${PROJECT_NAME})

# catkin_add_gtest(test_protobuf
#   test/test_protobuf.cc
# )
# target_link_libraries(test_protobuf ${PROJECT_NAME})

# catkin_add_gtest(test_tsdf_interpolator
#   test/test_tsdf_interpolator.cc
# )
# target_link_libraries(test_tsdf_interpolator ${PROJECT_NAME})

# catkin_add_gtest(test_layer
#   test/test_layer.cc
# )
# target_link_libraries(test_layer ${PROJECT_NAME})

# catkin_add_gtest(test_merge_integration
#   test/test_merge_integration.cc
# )
# target_link_libraries(test_merge_integration ${PROJECT_NAME})

# catkin_add_gtest(test_layer_utils
#   test/test_layer_utils.cc
# )
# target_link_libraries(test_layer_utils ${PROJECT_NAME})

# catkin_add_gtest(test_sdf_integrators
#   test/test_sdf_integrators.cc
# )
# target_link_libraries(test_sdf_integrators ${PROJECT_NAME})

# catkin_add_gtest(test_bucket_queue
#   test/test_bucket_queue.cc
# )
# target_link_libraries(test_bucket_queue ${PROJECT_NAME})

# catkin_add_gtest(test_clear_spheres
#   test/test_clear_spheres.cc
# )
# target_link_libraries(test_clear_spheres ${PROJECT_NAME})


##########
# EXPORT #
##########

# Install public headers
install(DIRECTORY include/ DESTINATION include)

# Install generated protobuf headers too (so downstream projects can include *.pb.h)
install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/
  DESTINATION include/${PROJECT_NAME}
  FILES_MATCHING PATTERN "*.pb.h"
)

# Install libraries and export set
install(TARGETS
  ${PROJECT_NAME}
  ${PROJECT_NAME}_proto
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)
ament_package()
